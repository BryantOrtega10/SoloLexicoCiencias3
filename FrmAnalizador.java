/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SoloLexico;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringReader;
import java.nio.file.Files;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Symbol;
import javax.swing.JFileChooser;

/**
 *
 * @author mdelgado
 */
public class FrmAnalizador extends javax.swing.JFrame {

    /**
     * Creates new form FrmAnalizador
     */
    public FrmAnalizador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BotonAnalisis = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Resultado = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAnalizarLex = new javax.swing.JTextArea();
        btnArchivo = new javax.swing.JButton();
        Borrar1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        BotonAnalisis.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        BotonAnalisis.setText("Análisis Léxico");
        BotonAnalisis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonAnalisisActionPerformed(evt);
            }
        });

        Resultado.setColumns(20);
        Resultado.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        Resultado.setRows(5);
        jScrollPane1.setViewportView(Resultado);

        txtAnalizarLex.setColumns(20);
        txtAnalizarLex.setRows(5);
        jScrollPane2.setViewportView(txtAnalizarLex);

        btnArchivo.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnArchivo.setText("Abrir Fuente");
        btnArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArchivoActionPerformed(evt);
            }
        });

        Borrar1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Borrar1.setText("Borrar");
        Borrar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Borrar1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BotonAnalisis)
                        .addGap(292, 292, 292)
                        .addComponent(Borrar1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 579, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(btnArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BotonAnalisis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Borrar1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap(150, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void analizarLexico() throws IOException {
        int cont = 1;

        String expr = (String) Resultado.getText();
        Lexico lexicos = new Lexico(new StringReader(expr));
        String resultado = "LINEA " + cont + "\t\tSIMBOLO\n";
        while (true) {
            Tokens token = lexicos.yylex();
            if (token == null) {
                txtAnalizarLex.setText(resultado);
                return;
            }
            switch (token) {
                case Linea:
                    cont++;
                    resultado += "LINEA " + cont + "\n";
                    break;
                case Comillas:
                    resultado += "<Reservada Comillas>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Byte:
                    resultado += "<Tipo de Dato Byte>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Char:
                    resultado += "<Tipo de Dato Char>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Double:
                    resultado += "<Tipo de Dato Double>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Float:
                    resultado += "<Tipo de Dato Float>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Int:
                    resultado += "<Tipo de Dato Int>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Long:
                    resultado += "<Tipo de Dato Long>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Short:
                    resultado += "<Tipo de Dato Short>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Unsigned:
                    resultado += "<Tipo de Dato Unsigned>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Void:
                    resultado += "<Tipo de Dato Void>\t\t" + lexicos.lexemas + "\n";
                    break;
                case String:
                    resultado += "<Tipo de Dato String>\t\t" + lexicos.lexemas + "\n";
                    break;
                case If:
                    resultado += "<Reservada If>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Else:
                    resultado += "<Reservada Else>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Do:
                    resultado += "<Reservada Do>\t\t" + lexicos.lexemas + "\n";
                    break;
                case While:
                    resultado += "<Reservada While>\t\t" + lexicos.lexemas + "\n";
                    break;
                case For:
                    resultado += "<Reservada For>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Continue:
                    resultado += "<Reservada Continue>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Switch:
                    resultado += "<Reservada Switch>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Case:
                    resultado += "<Reservada Case>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Break:
                    resultado += "<Reservada Break>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Default:
                    resultado += "<Reservada Default>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Try:
                    resultado += "<Reservada Try>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Catch:
                    resultado += "<Reservada Catch>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Finally:
                    resultado += "<Reservada Finally>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Numeral:
                    resultado += "<Reservada Numeral>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Include:
                    resultado += "<Reservada Include>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Define:
                    resultado += "<Reservada Define>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Const:
                    resultado += "<Reservada Const>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Register:
                    resultado += "<Reservada Register>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Struct:
                    resultado += "<Reservada Struct>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Typedef:
                    resultado += "<Reservada Typedef>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Return:
                    resultado += "<Reservada Return>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Printf:
                    resultado += "<Reservada Printf>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Scanf:
                    resultado += "<Reservada Scanf>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Cin:
                    resultado += "<Reservada Cin>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Cout:
                    resultado += "<Reservada Cout>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Using:
                    resultado += "<Reservada Using>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Namespace:
                    resultado += "<Reservada Namespace>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Std:
                    resultado += "<Reservada Std>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Igual:
                    resultado += "<Reservada Igual>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Suma:
                    resultado += "<Reservada Suma>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Resta:
                    resultado += "<Reservada Resta>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Multiplicacion:
                    resultado += "<Reservada Multiplicacion>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Division:
                    resultado += "<Reservada Division>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Modulo:
                    resultado += "<Reservada Modulo>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Potencia:
                    resultado += "<Reservada Potencia>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Op_And:
                    resultado += "<Reservada Op_And>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Op_Or:
                    resultado += "<Reservada Op_Or>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Op_Not:
                    resultado += "<Reservada Op_Not>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Op_Nand:
                    resultado += "<Reservada Op_Nand>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Op_Nor:
                    resultado += "<Reservada Op_Nor>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Op_Mayor:
                    resultado += "<Reservada Op_Mayor>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Op_Menor:
                    resultado += "<Reservada Op_Menor>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Op_IgualA:
                    resultado += "<Reservada Op_IgualA>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Op_DiferenteDe:
                    resultado += "<Reservada Op_DiferenteDe>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Op_MayorIgual:
                    resultado += "<Reservada Op_MayorIgual>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Op_MenorIgual:
                    resultado += "<Reservada Op_MenorIgual>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Op_MenorMenor:
                    resultado += "<Reservada Op_MenorMenor>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Op_MayorMayor:
                    resultado += "<Reservada Op_MayorMayor>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Op_MasIgual:
                    resultado += "<Reservada Op_MasIgual>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Op_MenosIgual:
                    resultado += "<Reservada Op_MenosIgual>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Op_PorIgual:
                    resultado += "<Reservada Op_PorIgual>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Op_DivIgual:
                    resultado += "<Reservada Op_DivIgual>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Op_ModIgual:
                    resultado += "<Reservada Op_ModIgual>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Op_MasMas:
                    resultado += "<Reservada Op_MasMas>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Op_MenosMenos:
                    resultado += "<Reservada Op_MenosMenos>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Verdadero:
                    resultado += "<Reservada Verdadero>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Falso:
                    resultado += "<Reservada Falso>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Null:
                    resultado += "<Reservada Null>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Parent_a:
                    resultado += "<Reservada Parent_a>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Parent_c:
                    resultado += "<Reservada Parent_c>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Llave_a:
                    resultado += "<Reservada Llave_a>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Llave_c:
                    resultado += "<Reservada Llave_c>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Corchete_a:
                    resultado += "<Reservada Corchete_a>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Corchete_c:
                    resultado += "<Reservada Corchete_c>\t\t" + lexicos.lexemas + "\n";
                    break;
                case P_Coma:
                    resultado += "<Reservada P_Coma>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Punto:
                    resultado += "<Reservada Punto>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Coma:
                    resultado += "<Reservada Coma>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Main:
                    resultado += "<Reservada Main>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Identificador:
                    resultado += "<Reservada Identificador>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Numero:
                    resultado += "<Reservada Numero>\t\t" + lexicos.lexemas + "\n";
                    break;
                case ERROR:
                    resultado += "<Reservada ERROR>\t\t" + lexicos.lexemas + "\n";
                    break;
                default:
                    resultado += "  < " + lexicos.lexemas + " >\n";
                    break;
            }
        }

    }

    private void BotonAnalisisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAnalisisActionPerformed
        try {
            analizarLexico();
        } catch (IOException ex) {
            Logger.getLogger(FrmAnalizador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BotonAnalisisActionPerformed

    private void btnArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArchivoActionPerformed
        int cont = 1;
        JFileChooser escoger = new JFileChooser();
        escoger.showOpenDialog(null);
        File arc = new File(escoger.getSelectedFile().getAbsolutePath());

        try {
            String ST = new String(Files.readAllBytes(arc.toPath()));
            Resultado.setText(ST);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrmAnalizador.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FrmAnalizador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnArchivoActionPerformed

    private void Borrar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Borrar1ActionPerformed
        txtAnalizarLex.setText(null);
    }//GEN-LAST:event_Borrar1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmAnalizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmAnalizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmAnalizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmAnalizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmAnalizador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Borrar1;
    private javax.swing.JButton BotonAnalisis;
    private javax.swing.JTextArea Resultado;
    private javax.swing.JButton btnArchivo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txtAnalizarLex;
    // End of variables declaration//GEN-END:variables
}
